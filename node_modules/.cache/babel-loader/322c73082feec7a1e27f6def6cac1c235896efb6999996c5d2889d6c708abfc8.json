{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\alexa\\\\Documents\\\\GitHub\\\\Nautical-Frank-Mole-React\\\\src\\\\views\\\\Dashboard.tsx\",\n  _s = $RefreshSig$();\nimport React, { useRef, useState } from 'react';\nimport Container from '@mui/material/Container';\nimport Typography from '@mui/material/Typography';\nimport Grid from '@mui/material/Grid';\nimport Button from '@mui/material/Button';\nimport Chart from 'chart.js/auto';\nimport { createTheme } from '@mui/material/styles';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Dashboard = () => {\n  _s();\n  const [graphData, setGraphData] = useState([10, 20, 30, 40, 50]);\n  const [graphQuery, setGraphQuery] = useState(''); // State for the graph query\n  const chartContainerRef = useRef(null);\n  const myChartRef = useRef(null);\n\n  //  const graphData = [60, 40, 80, 30, 70];\n\n  const theme = createTheme({\n    palette: {\n      primary: {\n        main: '#c9edf3'\n      },\n      secondary: {\n        main: ''\n      }\n    }\n  });\n  const handleGenerateGraph = () => {\n    // Check if myChart exists, and destroy it if it does\n    if (myChartRef.current !== null) {\n      myChartRef.current.destroy();\n    }\n\n    // Your code to generate or fetch data and create a new chart goes here\n    const graphData = {\n      labels: ['Label 1', 'Label 2', 'Label 3', 'Label 4', 'Label 5'],\n      datasets: [{\n        label: 'My Chart',\n        data: [60, 40, 80, 30, 70],\n        backgroundColor: ['red', 'blue', 'green', 'orange', 'purple'] // Add your own colors\n      }]\n    };\n\n    // Create a new canvas element\n    const canvas = document.createElement('canvas');\n    canvas.width = 50; // Set the width and height as per your requirement\n    canvas.height = 50;\n\n    // Append the canvas to the chart container\n    if (chartContainerRef.current) {\n      chartContainerRef.current.innerHTML = ''; // Clear previous charts\n      chartContainerRef.current.appendChild(canvas);\n    }\n\n    // Create a new chart\n    const ctx = canvas.getContext('2d');\n    if (ctx) {\n      myChartRef.current = new Chart(ctx, {\n        type: 'bar',\n        data: graphData\n        // ... other chart configurations\n      });\n    }\n  };\n  const handleCloseChart = () => {\n    // Check if myChart exists, and destroy it if it does\n    if (myChartRef.current !== null) {\n      myChartRef.current.destroy();\n    }\n\n    // Clear the chart container\n    if (chartContainerRef.current) {\n      chartContainerRef.current.innerHTML = '';\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      spacing: 2,\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        children: /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h4\",\n          children: \"Dashboard\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          variant: \"contained\",\n          color: \"primary\",\n          onClick: handleGenerateGraph,\n          children: \"Generate Chart\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"contained\",\n          color: \"secondary\",\n          onClick: handleCloseChart,\n          children: \"Close Chart\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          ref: chartContainerRef,\n          style: {\n            width: '20rem',\n            height: '16rem'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 82,\n    columnNumber: 9\n  }, this);\n};\n_s(Dashboard, \"HjXCMEiS00uYiBVIFfQY69LedAM=\");\n_c = Dashboard;\nexport default Dashboard;\nvar _c;\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"names":["React","useRef","useState","Container","Typography","Grid","Button","Chart","createTheme","jsxDEV","_jsxDEV","Dashboard","_s","graphData","setGraphData","graphQuery","setGraphQuery","chartContainerRef","myChartRef","theme","palette","primary","main","secondary","handleGenerateGraph","current","destroy","labels","datasets","label","data","backgroundColor","canvas","document","createElement","width","height","innerHTML","appendChild","ctx","getContext","type","handleCloseChart","children","container","spacing","item","xs","variant","fileName","_jsxFileName","lineNumber","columnNumber","color","onClick","ref","style","_c","$RefreshReg$"],"sources":["C:/Users/alexa/Documents/GitHub/Nautical-Frank-Mole-React/src/views/Dashboard.tsx"],"sourcesContent":["import React, {useEffect, useRef, useState} from 'react';\r\nimport CssBaseline from '@mui/material/CssBaseline';\r\nimport Container from '@mui/material/Container';\r\nimport Typography from '@mui/material/Typography';\r\nimport Grid from '@mui/material/Grid';\r\nimport TextField from '@mui/material/TextField';\r\nimport Button from '@mui/material/Button';\r\nimport Chart from 'chart.js/auto';\r\nimport { ThemeProvider, createTheme } from '@mui/material/styles';\r\n\r\nconst Dashboard: React.FC = () => {\r\n    const [graphData, setGraphData] = useState<number[]>([10, 20, 30, 40, 50]);\r\n    const [graphQuery, setGraphQuery] = useState<string>(''); // State for the graph query\r\n    const chartContainerRef = useRef<HTMLDivElement | null>(null);\r\n    const myChartRef = useRef<Chart | null>(null);\r\n\r\n    //  const graphData = [60, 40, 80, 30, 70];\r\n\r\n    const theme = createTheme({\r\n        palette: {\r\n            primary: {\r\n                main: '#c9edf3',\r\n            },\r\n            secondary: {\r\n                main: ''\r\n            }\r\n        },\r\n    });\r\n\r\n    const handleGenerateGraph = () => {\r\n        // Check if myChart exists, and destroy it if it does\r\n        if (myChartRef.current !== null) {\r\n            myChartRef.current.destroy();\r\n        }\r\n\r\n        // Your code to generate or fetch data and create a new chart goes here\r\n        const graphData = {\r\n            labels: ['Label 1', 'Label 2', 'Label 3', 'Label 4', 'Label 5'],\r\n            datasets: [\r\n                {\r\n                    label: 'My Chart',\r\n                    data: [60, 40, 80, 30, 70],\r\n                    backgroundColor: ['red', 'blue', 'green', 'orange', 'purple'], // Add your own colors\r\n                },\r\n            ],\r\n        };\r\n\r\n        // Create a new canvas element\r\n        const canvas = document.createElement('canvas');\r\n        canvas.width = 50; // Set the width and height as per your requirement\r\n        canvas.height = 50;\r\n\r\n        // Append the canvas to the chart container\r\n        if (chartContainerRef.current) {\r\n            chartContainerRef.current.innerHTML = ''; // Clear previous charts\r\n            chartContainerRef.current.appendChild(canvas);\r\n        }\r\n\r\n        // Create a new chart\r\n        const ctx = canvas.getContext('2d');\r\n        if (ctx) {\r\n            myChartRef.current = new Chart(ctx, {\r\n                type: 'bar',\r\n                data: graphData,\r\n                // ... other chart configurations\r\n            });\r\n        }\r\n    };\r\n    const handleCloseChart = () => {\r\n        // Check if myChart exists, and destroy it if it does\r\n        if (myChartRef.current !== null) {\r\n            myChartRef.current.destroy();\r\n        }\r\n\r\n        // Clear the chart container\r\n        if (chartContainerRef.current) {\r\n            chartContainerRef.current.innerHTML = '';\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Container>\r\n            <Grid container spacing={2}>\r\n                <Grid item xs={12}>\r\n                    <Typography variant=\"h4\">Dashboard</Typography>\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                    <Button variant=\"contained\" color=\"primary\" onClick={handleGenerateGraph}>\r\n                        Generate Chart\r\n                    </Button>\r\n                    <Button variant=\"contained\" color=\"secondary\" onClick={handleCloseChart}>\r\n                        Close Chart\r\n                    </Button>\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                    <div ref={chartContainerRef} style={{ width: '20rem', height: '16rem' }}></div>\r\n                </Grid>\r\n            </Grid>\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default Dashboard;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}