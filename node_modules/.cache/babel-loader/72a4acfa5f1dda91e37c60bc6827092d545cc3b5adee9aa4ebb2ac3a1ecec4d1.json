{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\alexa\\\\Documents\\\\GitHub\\\\Nautical-Frank-Mole-React\\\\src\\\\views\\\\Dashboard.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from 'react';\nimport Typography from '@mui/material/Typography';\nimport Grid from '@mui/material/Grid';\nimport Chart from 'chart.js/auto';\nimport { ThemeProvider, createTheme } from '@mui/material/styles';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Dashboard = () => {\n  _s();\n  const [userData, setUserData] = useState(1000);\n  const [eventData, setEventData] = useState(50);\n  const [chartData, setChartData] = useState([]);\n  const chartContainerRef = useRef(null);\n  const myChartRefs = useRef([]);\n  const theme = createTheme({\n    palette: {\n      primary: {\n        main: '#c9edf3'\n      },\n      secondary: {\n        main: '#ffe4df'\n      }\n    }\n  });\n  const handleGenerateGraph = (data, label, color) => {\n    // Create a new chart data object\n    const newChartData = {\n      label,\n      data,\n      color\n    };\n\n    // Update the chart data array\n    setChartData(prevChartData => [...prevChartData, newChartData]);\n\n    // Clear the chart container\n    if (chartContainerRef.current) {\n      chartContainerRef.current.innerHTML = '';\n    }\n\n    // Create a new chart for the updated chart data array\n    const canvas = document.createElement('canvas');\n    canvas.width = 400; // Set the width and height as per your requirement\n    canvas.height = 400;\n    if (chartContainerRef.current) {\n      chartContainerRef.current.appendChild(canvas);\n    }\n    const ctx = canvas.getContext('2d');\n    if (ctx) {\n      myChartRefs.current.push(new Chart(ctx, {\n        type: 'bar',\n        data: {\n          labels: [newChartData.label],\n          datasets: [{\n            label: newChartData.label,\n            data: [newChartData.data],\n            backgroundColor: [newChartData.color]\n          }]\n        }\n      }));\n    }\n  };\n  const handleCloseChart = () => {\n    // Destroy all existing charts\n    myChartRefs.current.forEach(chart => {\n      if (chart) {\n        chart.destroy();\n      }\n    });\n\n    // Clear the chart data array\n    setChartData([]);\n\n    // Clear the chart container\n    if (chartContainerRef.current) {\n      chartContainerRef.current.innerHTML = '';\n    }\n\n    // Reset the array of chart references\n    myChartRefs.current = [];\n  };\n  useEffect(() => {\n    // Initial chart generation with mock data\n    handleGenerateGraph(userData, 'Registered Users', 'blue');\n  }, [userData]);\n  return /*#__PURE__*/_jsxDEV(ThemeProvider, {\n    theme: theme,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        spacing: 2,\n        children: [/*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          sm: 6,\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h6\",\n            children: \"Registered Users\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 106,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"subtitle1\",\n            children: userData\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 107,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          sm: 6,\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h6\",\n            children: \"Event Data\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 110,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"subtitle1\",\n            children: eventData\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 111,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleGenerateGraph(userData, 'Registered Users', 'blue'),\n        style: {\n          background: '#ffe4df'\n        },\n        children: \"Generate Users Chart\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleGenerateGraph(eventData, 'Event Data', 'green'),\n        style: {\n          background: '#ffe4df'\n        },\n        children: \"Generate Event Chart\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleCloseChart,\n        style: {\n          background: '#c9edf3'\n        },\n        children: \"Close Chart\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        ref: chartContainerRef,\n        style: {\n          display: 'flex',\n          gap: '1rem',\n          flexWrap: 'wrap'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 102,\n    columnNumber: 9\n  }, this);\n};\n_s(Dashboard, \"WBo+XoVLkkhajOZN8ZL3STp2QNk=\");\n_c = Dashboard;\nexport default Dashboard;\nvar _c;\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"names":["React","useEffect","useRef","useState","Typography","Grid","Chart","ThemeProvider","createTheme","jsxDEV","_jsxDEV","Dashboard","_s","userData","setUserData","eventData","setEventData","chartData","setChartData","chartContainerRef","myChartRefs","theme","palette","primary","main","secondary","handleGenerateGraph","data","label","color","newChartData","prevChartData","current","innerHTML","canvas","document","createElement","width","height","appendChild","ctx","getContext","push","type","labels","datasets","backgroundColor","handleCloseChart","forEach","chart","destroy","children","container","spacing","item","xs","sm","variant","fileName","_jsxFileName","lineNumber","columnNumber","onClick","style","background","ref","display","gap","flexWrap","_c","$RefreshReg$"],"sources":["C:/Users/alexa/Documents/GitHub/Nautical-Frank-Mole-React/src/views/Dashboard.tsx"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\r\nimport CssBaseline from '@mui/material/CssBaseline';\r\nimport Container from '@mui/material/Container';\r\nimport Typography from '@mui/material/Typography';\r\nimport Grid from '@mui/material/Grid';\r\nimport TextField from '@mui/material/TextField';\r\nimport Button from '@mui/material/Button';\r\nimport Chart from 'chart.js/auto';\r\nimport { ThemeProvider, createTheme } from '@mui/material/styles';\r\n\r\ninterface ChartData {\r\n    label: string;\r\n    data: number;\r\n    color: string;\r\n}\r\n\r\nconst Dashboard: React.FC = () => {\r\n    const [userData, setUserData] = useState<number>(1000);\r\n    const [eventData, setEventData] = useState<number>(50);\r\n    const [chartData, setChartData] = useState<ChartData[]>([]);\r\n    const chartContainerRef = useRef<HTMLDivElement | null>(null);\r\n    const myChartRefs = useRef<Array<Chart | null>>([]);\r\n\r\n    const theme = createTheme({\r\n        palette: {\r\n            primary: {\r\n                main: '#c9edf3',\r\n            },\r\n            secondary: {\r\n                main: '#ffe4df',\r\n            },\r\n        },\r\n    });\r\n\r\n    const handleGenerateGraph = (data: number, label: string, color: string) => {\r\n        // Create a new chart data object\r\n        const newChartData: ChartData = { label, data, color };\r\n\r\n        // Update the chart data array\r\n        setChartData((prevChartData) => [...prevChartData, newChartData]);\r\n\r\n        // Clear the chart container\r\n        if (chartContainerRef.current) {\r\n            chartContainerRef.current.innerHTML = '';\r\n        }\r\n\r\n        // Create a new chart for the updated chart data array\r\n        const canvas = document.createElement('canvas');\r\n        canvas.width = 400; // Set the width and height as per your requirement\r\n        canvas.height = 400;\r\n\r\n        if (chartContainerRef.current) {\r\n            chartContainerRef.current.appendChild(canvas);\r\n        }\r\n\r\n        const ctx = canvas.getContext('2d');\r\n        if (ctx) {\r\n            myChartRefs.current.push(\r\n                new Chart(ctx, {\r\n                    type: 'bar',\r\n                    data: {\r\n                        labels: [newChartData.label],\r\n                        datasets: [\r\n                            {\r\n                                label: newChartData.label,\r\n                                data: [newChartData.data],\r\n                                backgroundColor: [newChartData.color],\r\n                            },\r\n                        ],\r\n                    },\r\n                })\r\n            );\r\n        }\r\n    };\r\n\r\n    const handleCloseChart = () => {\r\n        // Destroy all existing charts\r\n        myChartRefs.current.forEach((chart) => {\r\n            if (chart) {\r\n                chart.destroy();\r\n            }\r\n        });\r\n\r\n        // Clear the chart data array\r\n        setChartData([]);\r\n\r\n        // Clear the chart container\r\n        if (chartContainerRef.current) {\r\n            chartContainerRef.current.innerHTML = '';\r\n        }\r\n\r\n        // Reset the array of chart references\r\n        myChartRefs.current = [];\r\n    };\r\n\r\n    useEffect(() => {\r\n        // Initial chart generation with mock data\r\n        handleGenerateGraph(userData, 'Registered Users', 'blue');\r\n    }, [userData]);\r\n\r\n    return (\r\n        <ThemeProvider theme={theme}>\r\n            <div>\r\n                <Grid container spacing={2}>\r\n                    <Grid item xs={12} sm={6}>\r\n                        <Typography variant=\"h6\">Registered Users</Typography>\r\n                        <Typography variant=\"subtitle1\">{userData}</Typography>\r\n                    </Grid>\r\n                    <Grid item xs={12} sm={6}>\r\n                        <Typography variant=\"h6\">Event Data</Typography>\r\n                        <Typography variant=\"subtitle1\">{eventData}</Typography>\r\n                    </Grid>\r\n                </Grid>\r\n\r\n                <button\r\n                    onClick={() => handleGenerateGraph(userData, 'Registered Users', 'blue')}\r\n                    style={{ background: '#ffe4df' }}\r\n                >\r\n                    Generate Users Chart\r\n                </button>\r\n                <button\r\n                    onClick={() => handleGenerateGraph(eventData, 'Event Data', 'green')}\r\n                    style={{ background: '#ffe4df' }}\r\n                >\r\n                    Generate Event Chart\r\n                </button>\r\n                <button onClick={handleCloseChart} style={{ background: '#c9edf3' }}>\r\n                    Close Chart\r\n                </button>\r\n                <div ref={chartContainerRef} style={{ display: 'flex', gap: '1rem', flexWrap: 'wrap' }}></div>\r\n            </div>\r\n        </ThemeProvider>\r\n    );\r\n};\r\n\r\nexport default Dashboard;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}