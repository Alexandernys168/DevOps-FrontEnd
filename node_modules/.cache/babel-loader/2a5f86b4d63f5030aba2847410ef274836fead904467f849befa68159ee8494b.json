{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\alexa\\\\Documents\\\\GitHub\\\\Nautical-Frank-Mole-React\\\\src\\\\views\\\\Dashboard.tsx\",\n  _s = $RefreshSig$();\nimport React, { useRef, useState } from 'react';\nimport Chart from 'chart.js/auto';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Dashboard = () => {\n  _s();\n  const [graphData, setGraphData] = useState([10, 20, 30, 40, 50]);\n  const [graphQuery, setGraphQuery] = useState(''); // State for the graph query\n  const chartContainerRef = useRef(null);\n  const myChartRef = useRef(null);\n\n  //  const graphData = [60, 40, 80, 30, 70];\n\n  const handleGenerateGraph = () => {\n    // Check if myChart exists, and destroy it if it does\n    if (myChartRef.current !== null) {\n      myChartRef.current.destroy();\n    }\n\n    // Your code to generate or fetch data and create a new chart goes here\n    const graphData = {\n      labels: ['Label 1', 'Label 2', 'Label 3', 'Label 4', 'Label 5'],\n      datasets: [{\n        label: 'My Chart',\n        data: [60, 40, 80, 30, 70],\n        backgroundColor: ['red', 'blue', 'green', 'orange', 'purple'] // Add your own colors\n      }]\n    };\n\n    // Create a new canvas element\n    const canvas = document.createElement('canvas');\n    canvas.width = 400; // Set the width and height as per your requirement\n    canvas.height = 400;\n\n    // Append the canvas to the chart container\n    if (chartContainerRef.current) {\n      chartContainerRef.current.innerHTML = ''; // Clear previous charts\n      chartContainerRef.current.appendChild(canvas);\n    }\n\n    // Create a new chart\n    const ctx = canvas.getContext('2d');\n    if (ctx) {\n      myChartRef.current = new Chart(ctx, {\n        type: 'bar',\n        data: graphData\n        // ... other chart configurations\n      });\n    }\n  };\n  const handleCloseChart = () => {\n    // Check if myChart exists, and destroy it if it does\n    if (myChartRef.current !== null) {\n      myChartRef.current.destroy();\n    }\n\n    // Clear the chart container\n    if (chartContainerRef.current) {\n      chartContainerRef.current.innerHTML = '';\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleGenerateGraph,\n      children: \"Generate Chart\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleCloseChart,\n      children: \"Close Chart\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: chartContainerRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 9\n  }, this);\n};\n_s(Dashboard, \"HjXCMEiS00uYiBVIFfQY69LedAM=\");\n_c = Dashboard;\nexport default Dashboard;\nvar _c;\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"names":["React","useRef","useState","Chart","jsxDEV","_jsxDEV","Dashboard","_s","graphData","setGraphData","graphQuery","setGraphQuery","chartContainerRef","myChartRef","handleGenerateGraph","current","destroy","labels","datasets","label","data","backgroundColor","canvas","document","createElement","width","height","innerHTML","appendChild","ctx","getContext","type","handleCloseChart","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","ref","_c","$RefreshReg$"],"sources":["C:/Users/alexa/Documents/GitHub/Nautical-Frank-Mole-React/src/views/Dashboard.tsx"],"sourcesContent":["import React, {useEffect, useRef, useState} from 'react';\r\nimport CssBaseline from '@mui/material/CssBaseline';\r\nimport Container from '@mui/material/Container';\r\nimport Typography from '@mui/material/Typography';\r\nimport Grid from '@mui/material/Grid';\r\nimport TextField from '@mui/material/TextField';\r\nimport Button from '@mui/material/Button';\r\nimport Chart from 'chart.js/auto';\r\n\r\nconst Dashboard: React.FC = () => {\r\n    const [graphData, setGraphData] = useState<number[]>([10, 20, 30, 40, 50]);\r\n    const [graphQuery, setGraphQuery] = useState<string>(''); // State for the graph query\r\n    const chartContainerRef = useRef<HTMLDivElement | null>(null);\r\n    const myChartRef = useRef<Chart | null>(null);\r\n\r\n    //  const graphData = [60, 40, 80, 30, 70];\r\n\r\n\r\n\r\n    const handleGenerateGraph = () => {\r\n        // Check if myChart exists, and destroy it if it does\r\n        if (myChartRef.current !== null) {\r\n            myChartRef.current.destroy();\r\n        }\r\n\r\n        // Your code to generate or fetch data and create a new chart goes here\r\n        const graphData = {\r\n            labels: ['Label 1', 'Label 2', 'Label 3', 'Label 4', 'Label 5'],\r\n            datasets: [\r\n                {\r\n                    label: 'My Chart',\r\n                    data: [60, 40, 80, 30, 70],\r\n                    backgroundColor: ['red', 'blue', 'green', 'orange', 'purple'], // Add your own colors\r\n                },\r\n            ],\r\n        };\r\n\r\n        // Create a new canvas element\r\n        const canvas = document.createElement('canvas');\r\n        canvas.width = 400; // Set the width and height as per your requirement\r\n        canvas.height = 400;\r\n\r\n        // Append the canvas to the chart container\r\n        if (chartContainerRef.current) {\r\n            chartContainerRef.current.innerHTML = ''; // Clear previous charts\r\n            chartContainerRef.current.appendChild(canvas);\r\n        }\r\n\r\n        // Create a new chart\r\n        const ctx = canvas.getContext('2d');\r\n        if (ctx) {\r\n            myChartRef.current = new Chart(ctx, {\r\n                type: 'bar',\r\n                data: graphData,\r\n                // ... other chart configurations\r\n            });\r\n        }\r\n    };\r\n    const handleCloseChart = () => {\r\n        // Check if myChart exists, and destroy it if it does\r\n        if (myChartRef.current !== null) {\r\n            myChartRef.current.destroy();\r\n        }\r\n\r\n        // Clear the chart container\r\n        if (chartContainerRef.current) {\r\n            chartContainerRef.current.innerHTML = '';\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <button onClick={handleGenerateGraph}>Generate Chart</button>\r\n            <button onClick={handleCloseChart}>Close Chart</button>\r\n            <div ref={chartContainerRef}></div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Dashboard;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}