{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\alexa\\\\Documents\\\\GitHub\\\\Nautical-Frank-Mole-React\\\\src\\\\views\\\\Dashboard.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from 'react';\nimport Typography from '@mui/material/Typography';\nimport Grid from '@mui/material/Grid';\nimport Chart from 'chart.js/auto';\nimport { ThemeProvider, createTheme } from '@mui/material/styles';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Dashboard = () => {\n  _s();\n  const [userData, setUserData] = useState(1000); // Mock user data\n  const [eventData, setEventData] = useState(50); // Mock event data\n  const [graphQuery, setGraphQuery] = useState(''); // State for the graph query\n  const chartContainerRef = useRef(null);\n  const myChartRef = useRef(null);\n\n  //  const graphData = [60, 40, 80, 30, 70];\n\n  const theme = createTheme({\n    palette: {\n      primary: {\n        main: '#c9edf3'\n      },\n      secondary: {\n        main: '#ffe4df'\n      }\n    }\n  });\n  const handleGenerateGraph = (data, label, color) => {\n    // Check if myChart exists, and destroy it if it does\n    if (myChartRef.current !== null) {\n      myChartRef.current.destroy();\n    }\n\n    // Your code to generate or fetch data and create a new chart goes here\n    const graphData = {\n      labels: [label],\n      datasets: [{\n        label,\n        data: [data],\n        backgroundColor: [color] // Add your own colors\n      }]\n    };\n\n    // Create a new canvas element\n    const canvas = document.createElement('canvas');\n    canvas.width = 400; // Set the width and height as per your requirement\n    canvas.height = 400;\n\n    // Append the canvas to the chart container\n    if (chartContainerRef.current) {\n      chartContainerRef.current.innerHTML = ''; // Clear previous charts\n      chartContainerRef.current.appendChild(canvas);\n    }\n\n    // Create a new chart\n    const ctx = canvas.getContext('2d');\n    if (ctx) {\n      myChartRef.current = new Chart(ctx, {\n        type: 'bar',\n        data: graphData\n        // ... other chart configurations\n      });\n    }\n  };\n  const handleCloseChart = () => {\n    // Check if myChart exists, and destroy it if it does\n    if (myChartRef.current !== null) {\n      myChartRef.current.destroy();\n    }\n\n    // Clear the chart container\n    if (chartContainerRef.current) {\n      chartContainerRef.current.innerHTML = '';\n    }\n  };\n  useEffect(() => {\n    // Initial chart generation with mock data\n    handleGenerateGraph(userData, 'Registered Users', 'blue');\n  }, [userData]);\n  return /*#__PURE__*/_jsxDEV(ThemeProvider, {\n    theme: theme,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        spacing: 2,\n        children: [/*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          sm: 6,\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h6\",\n            children: \"Registered Users\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 93,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"subtitle1\",\n            children: userData\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          sm: 6,\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h6\",\n            children: \"Event Data\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"subtitle1\",\n            children: eventData\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 98,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleGenerateGraph(userData, 'Registered Users', 'blue'),\n        style: {\n          background: \"#ffe4df\"\n        },\n        children: \"Generate Users Chart\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleGenerateGraph(eventData, 'Event Data', 'green'),\n        style: {\n          background: \"#ffe4df\"\n        },\n        children: \"Generate Event Chart\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleCloseChart,\n        style: {\n          background: \"#c9edf3\"\n        },\n        children: \"Close Chart\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        ref: chartContainerRef,\n        style: {\n          width: '20rem',\n          height: '16rem'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 89,\n    columnNumber: 9\n  }, this);\n};\n_s(Dashboard, \"CTQzl+AfK3bU47GtgH/ILf8IP1o=\");\n_c = Dashboard;\nexport default Dashboard;\nvar _c;\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"names":["React","useEffect","useRef","useState","Typography","Grid","Chart","ThemeProvider","createTheme","jsxDEV","_jsxDEV","Dashboard","_s","userData","setUserData","eventData","setEventData","graphQuery","setGraphQuery","chartContainerRef","myChartRef","theme","palette","primary","main","secondary","handleGenerateGraph","data","label","color","current","destroy","graphData","labels","datasets","backgroundColor","canvas","document","createElement","width","height","innerHTML","appendChild","ctx","getContext","type","handleCloseChart","children","container","spacing","item","xs","sm","variant","fileName","_jsxFileName","lineNumber","columnNumber","onClick","style","background","ref","_c","$RefreshReg$"],"sources":["C:/Users/alexa/Documents/GitHub/Nautical-Frank-Mole-React/src/views/Dashboard.tsx"],"sourcesContent":["import React, {useEffect, useRef, useState} from 'react';\r\nimport CssBaseline from '@mui/material/CssBaseline';\r\nimport Container from '@mui/material/Container';\r\nimport Typography from '@mui/material/Typography';\r\nimport Grid from '@mui/material/Grid';\r\nimport TextField from '@mui/material/TextField';\r\nimport Button from '@mui/material/Button';\r\nimport Chart from 'chart.js/auto';\r\nimport { ThemeProvider, createTheme } from '@mui/material/styles';\r\n\r\nconst Dashboard: React.FC = () => {\r\n    const [userData, setUserData] = useState<number>(1000); // Mock user data\r\n    const [eventData, setEventData] = useState<number>(50); // Mock event data\r\n    const [graphQuery, setGraphQuery] = useState<string>(''); // State for the graph query\r\n    const chartContainerRef = useRef<HTMLDivElement | null>(null);\r\n    const myChartRef = useRef<Chart | null>(null);\r\n\r\n    //  const graphData = [60, 40, 80, 30, 70];\r\n\r\n    const theme = createTheme({\r\n        palette: {\r\n            primary: {\r\n                main: '#c9edf3',\r\n            },\r\n            secondary: {\r\n                main: '#ffe4df'\r\n            }\r\n        },\r\n    });\r\n    const handleGenerateGraph = (data: number, label: string, color: string) => {\r\n        // Check if myChart exists, and destroy it if it does\r\n        if (myChartRef.current !== null) {\r\n            myChartRef.current.destroy();\r\n        }\r\n\r\n        // Your code to generate or fetch data and create a new chart goes here\r\n        const graphData = {\r\n            labels: [label],\r\n            datasets: [\r\n                {\r\n                    label,\r\n                    data: [data],\r\n                    backgroundColor: [color], // Add your own colors\r\n                },\r\n            ],\r\n        };\r\n\r\n        // Create a new canvas element\r\n        const canvas = document.createElement('canvas');\r\n        canvas.width = 400; // Set the width and height as per your requirement\r\n        canvas.height = 400;\r\n\r\n        // Append the canvas to the chart container\r\n        if (chartContainerRef.current) {\r\n            chartContainerRef.current.innerHTML = ''; // Clear previous charts\r\n            chartContainerRef.current.appendChild(canvas);\r\n        }\r\n\r\n        // Create a new chart\r\n        const ctx = canvas.getContext('2d');\r\n        if (ctx) {\r\n            myChartRef.current = new Chart(ctx, {\r\n                type: 'bar',\r\n                data: graphData,\r\n                // ... other chart configurations\r\n            });\r\n        }\r\n    };\r\n\r\n    const handleCloseChart = () => {\r\n        // Check if myChart exists, and destroy it if it does\r\n        if (myChartRef.current !== null) {\r\n            myChartRef.current.destroy();\r\n        }\r\n\r\n        // Clear the chart container\r\n        if (chartContainerRef.current) {\r\n            chartContainerRef.current.innerHTML = '';\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        // Initial chart generation with mock data\r\n        handleGenerateGraph(userData, 'Registered Users', 'blue');\r\n    }, [userData]);\r\n\r\n\r\n    return (\r\n        <ThemeProvider theme={theme}>\r\n            <div>\r\n                <Grid container spacing={2}>\r\n                    <Grid item xs={12} sm={6}>\r\n                        <Typography variant=\"h6\">Registered Users</Typography>\r\n                        <Typography variant=\"subtitle1\">{userData}</Typography>\r\n                    </Grid>\r\n                    <Grid item xs={12} sm={6}>\r\n                        <Typography variant=\"h6\">Event Data</Typography>\r\n                        <Typography variant=\"subtitle1\">{eventData}</Typography>\r\n                    </Grid>\r\n                </Grid>\r\n\r\n                <button onClick={() => handleGenerateGraph(userData, 'Registered Users', 'blue')}\r\n                        style={{background:\"#ffe4df\"}} >\r\n                    Generate Users Chart\r\n                </button>\r\n                <button onClick={() => handleGenerateGraph(eventData, 'Event Data', 'green')}\r\n                        style={{background:\"#ffe4df\"}}>\r\n                    Generate Event Chart\r\n                </button>\r\n                <button onClick={handleCloseChart} style={{background:\"#c9edf3\"}}>Close Chart</button>\r\n                <div ref={chartContainerRef} style={{ width: '20rem', height: '16rem' }}></div>\r\n            </div>\r\n        </ThemeProvider>\r\n    );\r\n};\r\n\r\nexport default Dashboard;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}